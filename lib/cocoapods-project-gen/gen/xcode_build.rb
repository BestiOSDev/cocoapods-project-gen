require 'cocoapods/executable'

module ProjectGen
  module XcodeBuild

    def self.archive(args, project_path, scheme, archive_path)
      command = %w[clean archive -showBuildTimingSummary]
      command += args
      command += %W[-project #{project_path} -scheme #{scheme} -archivePath #{archive_path}]
      command += %w[SKIP_INSTALL=NO]
      output = begin
        Pod::Executable.capture_command('xcodebuild', command).first
      rescue StandardError => e
        e.message
      end
      parsed_output = parse_xcodebuild_output(output)
      Pod::UI.puts parsed_output unless parsed_output.empty?
    end

    def self.create_xcframework(args, output_path)
      command = %w[-create-xcframework]
      command += args
      command += %W[-output #{output_path}]

      output = begin
        Pod::Executable.capture_command('xcodebuild', command).first
      rescue StandardError => e
        e.message
      end
      parsed_output = parse_xcodebuild_output(output)
      Pod::UI.puts parsed_output unless parsed_output.empty?
    end

    # Parse the xcode build output to identify the lines which are relevant
    # to the linter.
    #
    # @param  [String] output the output generated by the xcodebuild tool.
    #
    # @note   The indentation and the temporary path is stripped form the
    #         lines.
    #
    # @return [Array<String>] the lines that are relevant to the linter.
    #
    def self.parse_xcodebuild_output(output)
      lines = output.split("\n")
      lines.select do |l|
        l.include?('error: ') && (l !~ /errors? generated\./) && (l !~ /error: \(null\)/) ||
          l.include?('warning: ') && (l !~ /warnings? generated\./) && (l !~ /frameworks only run on iOS 8/) ||
          l.include?('note: ') && (l !~ /expanded from macro/)
      end
    end
  end
end
